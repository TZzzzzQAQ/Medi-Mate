package com.friedchicken.controller.AI;

import com.friedchicken.constant.MessageConstant;
import com.friedchicken.controller.AI.exception.ImageFailedUploadException;
import com.friedchicken.pojo.dto.AI.AICompareDTO;
import com.friedchicken.pojo.dto.AI.AIimageDTO;
import com.friedchicken.pojo.dto.AI.AItextDTO;
import com.friedchicken.pojo.vo.AI.AIcomparisonVO;
import com.friedchicken.pojo.vo.AI.AItextVO;
import com.friedchicken.pojo.vo.Medicine.MedicineListVO;
import com.friedchicken.result.PageResult;
import com.friedchicken.result.Result;
import com.friedchicken.service.AiService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

@RestController
@RequestMapping("/api/message")
@Tag(name = "Message", description = "API for User to send message.")
@Slf4j
public class AIController {

    @Autowired
    private AiService aiService;

    @PostMapping("/text")
    @Operation(summary = "User send message to connect AI model.",
            description = "If the user want to search information from model,it will return a message from model.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Login successfully.",
                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = AItextVO.class)))
    })
    public Result<AItextVO> sendMessage(
            @Parameter(description = "User send message.", required = true)
            @RequestBody AItextDTO aitextDTO
    ) {
        log.info("User want to use AI model to send message.{}", aitextDTO.toString());

        AItextVO aitextVO = aiService.handlerText(aitextDTO.getMessage());

        return Result.success(aitextVO);
    }

    @PostMapping("/imageUrl")
    @Operation(summary = "User sends an image to connect with the AI model.",
            description = "If the user wants to search using the image from the model, it will return a response generated by the model.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Image processed successfully.",
                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = AItextVO.class)))
    })
    public Result<AItextVO> sendImage(
            @Parameter(description = "User send image.", required = true, content = @Content(mediaType = "multipart/form-data"))
            @RequestBody AIimageDTO aiimageDTO
    ) {
        log.info("User want to use AI model to send image url.{}", aiimageDTO.toString());

        AItextVO aitextVO = aiService.analyzeImageUrl(aiimageDTO);

        return Result.success(aitextVO);
    }

    @PostMapping("/image")
    @Operation(summary = "User sends an image to connect with the AI model.",
            description = "If the user wants to search using the image from the model,")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Image processed successfully.",
                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = AItextVO.class)))
    })
    public Result<PageResult<MedicineListVO>> sendImageUrl(@RequestBody MultipartFile file) {
        log.info("User want to use AI model to send image.");

        byte[] imageData;
        try {
            imageData = file.getBytes();
        } catch (IOException e) {
            throw new ImageFailedUploadException(MessageConstant.FILE_UPLOAD_ERROR);
        }
        PageResult<MedicineListVO> pageResult = aiService.analyzeImage(imageData);
        return Result.success(pageResult);
    }

    @PostMapping("/comparison")
    @Operation(summary = "User sends lots of products to compare each other.",
            description = "If the user wants to search using the image from the model,")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Image processed successfully.",
                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = AIcomparisonVO.class)))
    })
    public Result<AIcomparisonVO> sendImageComparison(@RequestBody AICompareDTO aiCompareDTO) {
        log.info("User want to use AI model to send comparison.{}", aiCompareDTO.toString());

        AIcomparisonVO aicomparisonVO = aiService.compareImage(aiCompareDTO);
        log.info("Compare result,{}", aicomparisonVO.toString());
        return Result.success(aicomparisonVO);
    }
}
